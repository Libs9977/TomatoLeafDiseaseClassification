"C:\Users\libas\Desktop\COURS 2020\FINAL UNIVERSITY\IDEES DE PROJETS\catsAndDogs\Scripts\python.exe" "C:\Users\libas\Desktop\COURS 2020\FINAL UNIVERSITY\COURSES\THESIS\Program\catsAndDogs\propoesModel.py" 
2025-07-20 12:42:57.916264: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-07-20 12:42:58.698633: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Found 18197 images belonging to 10 classes.
Found 3760 images belonging to 10 classes.
Found 360 images belonging to 10 classes.
C:\Users\libas\Desktop\COURS 2020\FINAL UNIVERSITY\IDEES DE PROJETS\catsAndDogs\Lib\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-07-20 12:43:27.784550: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
Model: "sequential"
┌─────────────────────────────────┬────────────────────────┬───────────────┐
│ Layer (type)                    │ Output Shape           │       Param # │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d (Conv2D)                 │ (None, 112, 112, 64)   │         9,472 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling2d (MaxPooling2D)    │ (None, 55, 55, 64)     │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization             │ (None, 55, 55, 64)     │           256 │
│ (BatchNormalization)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_1 (Conv2D)               │ (None, 55, 55, 128)    │        73,856 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_2 (Conv2D)               │ (None, 55, 55, 128)    │       147,584 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling2d_1 (MaxPooling2D)  │ (None, 27, 27, 128)    │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_1           │ (None, 27, 27, 128)    │           512 │
│ (BatchNormalization)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_3 (Conv2D)               │ (None, 27, 27, 256)    │       295,168 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_4 (Conv2D)               │ (None, 27, 27, 256)    │       590,080 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling2d_2 (MaxPooling2D)  │ (None, 13, 13, 256)    │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_2           │ (None, 13, 13, 256)    │         1,024 │
│ (BatchNormalization)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_5 (Conv2D)               │ (None, 13, 13, 512)    │     1,180,160 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_6 (Conv2D)               │ (None, 13, 13, 512)    │     2,359,808 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling2d_3 (MaxPooling2D)  │ (None, 6, 6, 512)      │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout (Dropout)               │ (None, 6, 6, 512)      │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ flatten (Flatten)               │ (None, 18432)          │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense (Dense)                   │ (None, 4096)           │    75,501,568 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_1 (Dropout)             │ (None, 4096)           │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_1 (Dense)                 │ (None, 1024)           │     4,195,328 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_2 (Dropout)             │ (None, 1024)           │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_2 (Dense)                 │ (None, 10)             │        10,250 │
└─────────────────────────────────┴────────────────────────┴───────────────┘
 Total params: 84,365,066 (321.83 MB)
 Trainable params: 84,364,170 (321.82 MB)
 Non-trainable params: 896 (3.50 KB)
C:\Users\libas\Desktop\COURS 2020\FINAL UNIVERSITY\IDEES DE PROJETS\catsAndDogs\Lib\site-packages\keras\src\optimizers\base_optimizer.py:33: UserWarning: Argument `decay` is no longer supported and will be ignored.
  warnings.warn(
Epoch 1/30
C:\Users\libas\Desktop\COURS 2020\FINAL UNIVERSITY\IDEES DE PROJETS\catsAndDogs\Lib\site-packages\keras\src\trainers\data_adapters\py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
143/143 - 743s - 5s/step - accuracy: 0.2530 - loss: 2.0221
Epoch 2/30
143/143 - 724s - 5s/step - accuracy: 0.4768 - loss: 1.4533
Epoch 3/30
143/143 - 783s - 5s/step - accuracy: 0.5899 - loss: 1.1425
Epoch 4/30
143/143 - 910s - 6s/step - accuracy: 0.6665 - loss: 0.9320
Epoch 5/30
143/143 - 903s - 6s/step - accuracy: 0.7450 - loss: 0.7314
Epoch 6/30
143/143 - 899s - 6s/step - accuracy: 0.7914 - loss: 0.5890
Epoch 7/30
143/143 - 1135s - 8s/step - accuracy: 0.8243 - loss: 0.4948
Epoch 8/30
143/143 - 1164s - 8s/step - accuracy: 0.8573 - loss: 0.4029
Epoch 9/30
143/143 - 1158s - 8s/step - accuracy: 0.8725 - loss: 0.3575
Epoch 10/30
143/143 - 994s - 7s/step - accuracy: 0.8958 - loss: 0.2938
Epoch 11/30
143/143 - 849s - 6s/step - accuracy: 0.9160 - loss: 0.2378
Epoch 12/30
143/143 - 871s - 6s/step - accuracy: 0.9285 - loss: 0.2024
Epoch 13/30
143/143 - 2518s - 18s/step - accuracy: 0.9366 - loss: 0.1735
Epoch 14/30
143/143 - 796s - 6s/step - accuracy: 0.9492 - loss: 0.1485
Epoch 15/30
143/143 - 823s - 6s/step - accuracy: 0.9612 - loss: 0.1110
Epoch 16/30
143/143 - 802s - 6s/step - accuracy: 0.9692 - loss: 0.0899
Epoch 17/30
143/143 - 762s - 5s/step - accuracy: 0.9744 - loss: 0.0732
Epoch 18/30
143/143 - 755s - 5s/step - accuracy: 0.9742 - loss: 0.0737
Epoch 19/30
143/143 - 726s - 5s/step - accuracy: 0.9718 - loss: 0.0839
Epoch 20/30
143/143 - 734s - 5s/step - accuracy: 0.9734 - loss: 0.0743
Epoch 21/30
143/143 - 720s - 5s/step - accuracy: 0.9797 - loss: 0.0584
Epoch 22/30
143/143 - 728s - 5s/step - accuracy: 0.9834 - loss: 0.0507
Epoch 23/30
143/143 - 716s - 5s/step - accuracy: 0.9880 - loss: 0.0347
Epoch 24/30
143/143 - 715s - 5s/step - accuracy: 0.9922 - loss: 0.0244
Epoch 25/30
143/143 - 773s - 5s/step - accuracy: 0.9853 - loss: 0.0437
Epoch 26/30
143/143 - 875s - 6s/step - accuracy: 0.9912 - loss: 0.0277
Epoch 27/30
143/143 - 836s - 6s/step - accuracy: 0.9932 - loss: 0.0186
Epoch 28/30
143/143 - 719s - 5s/step - accuracy: 0.9949 - loss: 0.0155
Epoch 29/30
143/143 - 795s - 6s/step - accuracy: 0.9857 - loss: 0.0445
Epoch 30/30
143/143 - 737s - 5s/step - accuracy: 0.9909 - loss: 0.0294
3/3 ━━━━━━━━━━━━━━━━━━━━ 5s 1s/step - accuracy: 0.9431 - loss: 0.1971
Test loss: 0.19402585923671722
Test accuracy: 0.9388889074325562
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
Confusion matrix, without normalization
[[40  0  0  0  0  0  0  0  0  0]
 [ 0 35  0  1  0  0  3  0  1  0]
 [ 0  0 40  0  0  0  0  0  0  0]
 [ 0  2  0 37  0  0  1  0  0  0]
 [ 0  0  0  0 36  1  1  1  0  1]
 [ 0  0  0  0  0 40  0  0  0  0]
 [ 1  1  0  3  0  0 35  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0]
 [ 1  0  1  0  0  1  2  0 35  0]
 [ 0  0  0  0  0  0  0  0  0 40]]
